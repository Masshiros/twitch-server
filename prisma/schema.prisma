// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// MODELS

model User {
  id             String    @id @default(uuid())
  categoryId     String
  name           String
  slug           String
  email          String    @unique
  password       String
  phoneNumber    String
  dob            DateTime
  emailVerified  Boolean   @default(false)
  phoneVerified  Boolean   @default(false)
  isLive         Boolean   @default(false)
  view           Int       @default(0)
  bio            String?
  avatar         String?
  thumbnail      String?
  category       Category  @relation(fields: [categoryId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  deletedAt      DateTime?
  devices        Device[]
  tokens         Token[]
  loginHistories LoginHistory[]
}

enum ECategory {
  USER
  LIVESTREAM
}
model Category {
  id              String    @id @default(uuid())
  currentTotalView Int      @default(0)
  name            String
  slug            String
  image           String?
  tagId           String?
  applicableTo    ECategory
  applicableId    String
  users           User[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
}

enum EDeviceType {
  MOBILE
  DESKTOP
  TABLET
}
model Device {
  id              String       @id @default(uuid())
  userId          String       // Foreign key for User
  type            EDeviceType
  name            String
  lastUsed        DateTime

  tokens          Token[] 
  loginHistories  LoginHistory[]
  // Relations
  user            User    @relation(fields: [userId], references: [id])
}
model LoginHistory {
  id         String   @id @default(uuid())
  userId     String   // Foreign key for User
  deviceId   String   // Foreign key for Device
  loginAt    DateTime
  ipAddress  String
  loginStatus Boolean
  reason     String?

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])
}
model Token{
  id              String    @id @default(uuid())
  userId          String
  deviceId        String
  token           String
  expiresAt       DateTime

  user    User    @relation(fields: [userId], references: [id])
  device  Device  @relation(fields: [deviceId], references: [id])
}