// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// MODELS

model User {
  id                        String    @id @default(uuid())   
  name                      String    @unique
  displayName               String
  slug                      String
  email                     String    @unique
  password                  String
  phoneNumber               String
  dob                       DateTime
  emailVerifyToken          String    @default("")
  phoneVerifyToken          String    @default("")
  forgotPasswordToken       String    @default("")
  otpToken                  String    @default("")
  isLive                    Boolean   @default(false)  
  isActive                  Boolean   @default(true)
  is2FA                     Boolean   @default(false)
  view                      Int       @default(0)
  bio                       String?
  avatar                    String?
  thumbnail                 String?
  lastUsernameChangeAt      DateTime? 
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @default(now()) @updatedAt
  deletedAt                 DateTime?
  externalLinks             ExternalLink[]
  devices                   Device[]
  tokens                    Token[]
  loginHistories            LoginHistory[]
  userCategories            UsersCategories[]
  followedBy                Follower[]          @relation("UserFollowing")  
  following                 Follower[]          @relation("UserFollowers") 
  @@index([isLive])
  @@index([isActive])
  @@map("users")
  
}
model Follower {
  sourceUserId  String
  destinationUserId String
  followDate  DateTime @default(now())

  sourceUser        User @relation("UserFollowers", fields: [sourceUserId], references: [id])
  destinationUser   User @relation("UserFollowing", fields: [destinationUserId], references: [id])

  @@id([sourceUserId, destinationUserId])
  @@map("followers") 
}

model ExternalLink{
  id                String    @id @default(uuid())
  title             String    
  url               String
  userId            String
  user              User      @relation(fields: [userId],references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?
  @@map("externalLinks")
}
enum ECategory {
  USER
  LIVESTREAM
}
model Category {
  id              String    @id @default(uuid())
  currentTotalView Int      @default(0)
  name            String
  slug            String
  image           String?
  tagId           String?
  applicableTo    ECategory
  applicableId    String
  userId          String    
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  userCategories  UsersCategories[]
  @@map("categories")
}
model UsersCategories {
  id         String    @id @default(uuid())
  userId     String
  categoryId String
  user       User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@unique([userId, categoryId])
  @@map("userCategories")
}

model Device {
  id              String       @id @default(uuid())
  userId          String       
  type            String
  name            String
  lastUsed        DateTime
  userAgent       String     
  ipAddress       String

  token           Token? 
  loginHistories  LoginHistory[]
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  @@map("devices")
}
model LoginHistory {
  id              String   @id @default(uuid())
  userId          String   // Foreign key for User
  deviceId        String   // Foreign key for Device
  loginAt         DateTime
  loginStatus     Boolean
  reason          String?
  user            User   @relation(fields: [userId], references: [id])
  device          Device @relation(fields: [deviceId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  @@map("loginHistories")
}
model Token{
  id              String    @id @default(uuid())
  userId          String
  deviceId        String    @unique
  token           String
  expiresAt       DateTime

  user            User    @relation(fields: [userId], references: [id])
  device          Device  @relation(fields: [deviceId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?
  @@map("tokens")
}