generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                   @id @default(uuid())
  name                  String                   @unique
  displayName           String
  slug                  String
  email                 String                   @unique
  password              String
  phoneNumber           String
  dob                   DateTime
  emailVerifyToken      String                   @default("")
  phoneVerifyToken      String                   @default("")
  forgotPasswordToken   String                   @default("")
  otpToken              String                   @default("")
  isLive                Boolean                  @default(false)
  isActive              Boolean                  @default(true)
  is2FA                 Boolean                  @default(false)
  view                  Int                      @default(0)
  bio                   String?
  thumbnail             String?
  lastUsernameChangeAt  DateTime?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
  
  
  CategoryFollowers     CategoryFollowers[]      @relation("Users")
  devices               Device[]
  externalLinks         ExternalLink[]
  followedBy            Follower[]               @relation("UserFollowing")
  following             Follower[]               @relation("UserFollowers")
  groupMemberships      GroupMember[]
  ownedGroups           Group[]                  @relation("GroupOwner")
  hiddenByUsers         HiddenUser[]             @relation("HiddenUser")
  hiddenUsers           HiddenUser[]             @relation("UserWhoHides")
  loginHistories        LoginHistory[]
  sentNotifications     Notification[]           @relation("UserAsSender")
  receivedNotifications NotificationUser[]
  postReactions         PostReaction[]
  userPosts             Post[]
  taggedUsers           PostTaggedUser[]
  tokens                Token[]
  userCategories        UsersCategories[]        @relation("Users")
  viewPermissions       UserPostViewPermission[]
  userRoles             UserRole[]

  @@index([isLive])
  @@index([isActive])
  @@map("users")
}
enum EImage{
  USER
  POST
}
model Image{
  id             String @id @default(uuid())
  url            String 
  publicId       String @unique
  applicableType EImage
  applicableId   String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
 
  @@map("images")
}

model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt
  role      Role      @relation(fields: [roleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("userRoles")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @default(now()) @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("rolePermissions")
}

model Notification {
  id                 String             @id @default(uuid())
  title              String
  message            String
  slug               String
  type               ENotification
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  senderId           String
  deletedAt          DateTime?
  sender             User               @relation("UserAsSender", fields: [senderId], references: [id])
  notificationsUsers NotificationUser[]

  @@map("notifications")
}

model NotificationUser {
  notificationId String
  hasRead        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  receiverId     String
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [receiverId], references: [id])

  @@id([receiverId, notificationId])
  @@map("notificationsUser")
}

model Follower {
  followDate        DateTime @default(now())
  destinationUserId String
  sourceUserId      String
  destinationUser   User     @relation("UserFollowing", fields: [destinationUserId], references: [id])
  sourceUser        User     @relation("UserFollowers", fields: [sourceUserId], references: [id])

  @@id([sourceUserId, destinationUserId])
  @@map("followers")
}

model ExternalLink {
  id        String    @id @default(uuid())
  title     String
  url       String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@map("externalLinks")
}

model Category {
  id                String              @id @default(uuid())
  currentTotalView  Int                 @default(0)
  name              String
  slug              String              @unique
  image             String?
  applicableTo      ECategory
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  deletedAt         DateTime?
  numberOfFollowers Int                 @default(0)
  categoryFollowers CategoryFollowers[] @relation("Categories")
  tagsCategories    TagsCategories[]    @relation("Categories")
  userCategories    UsersCategories[]   @relation("Categories")

  @@map("categories")
}

model Tag {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  applicableTo   ETag
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  deletedAt      DateTime?
  tagsCategories TagsCategories[] @relation("Tags")

  @@map("tags")
}

model TagsCategories {
  tagId      String
  categoryId String
  category   Category @relation("Categories", fields: [categoryId], references: [id])
  tag        Tag      @relation("Tags", fields: [tagId], references: [id])

  @@id([tagId, categoryId])
  @@map("tagCategories")
}

model UsersCategories {
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  category   Category @relation("Categories", fields: [categoryId], references: [id])
  user       User     @relation("Users", fields: [userId], references: [id])

  @@id([userId, categoryId])
  @@map("userCategories")
}

model CategoryFollowers {
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  category   Category @relation("Categories", fields: [categoryId], references: [id])
  user       User     @relation("Users", fields: [userId], references: [id])

  @@id([userId, categoryId])
  @@map("categoryFollowers")
}

model Device {
  id             String         @id @default(uuid())
  userId         String
  type           String
  name           String
  lastUsed       DateTime
  userAgent      String
  ipAddress      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  deletedAt      DateTime?
  user           User           @relation(fields: [userId], references: [id])
  loginHistories LoginHistory[]
  token          Token?

  @@map("devices")
}

model LoginHistory {
  id          String    @id @default(uuid())
  userId      String
  deviceId    String
  loginAt     DateTime
  loginStatus Boolean
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  device      Device    @relation(fields: [deviceId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("loginHistories")
}

model Token {
  id        String    @id @default(uuid())
  userId    String
  deviceId  String    @unique
  token     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  device    Device    @relation(fields: [deviceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

model HiddenUser {
  userId       String
  hiddenUserId String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @default(now()) @updatedAt
  hiddenUser   User      @relation("HiddenUser", fields: [hiddenUserId], references: [id])
  user         User      @relation("UserWhoHides", fields: [userId], references: [id])

  @@id([userId, hiddenUserId])
  @@map("hidden_users")
}

model Group {
  id          String           @id @default(uuid())
  ownerId     String
  name        String
  description String
  visibility  EGroupVisibility
  joinLink    String?
  createdAt   DateTime         @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime         @default(now()) @updatedAt
  members     GroupMember[]
  owner       User             @relation("GroupOwner", fields: [ownerId], references: [id])
  posts       Post[]

  @@map("groups")
}

model GroupMember {
  groupId   String
  userId    String
  joinedAt  DateTime   @default(now())
  role      EGroupRole
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  updatedAt DateTime   @default(now()) @updatedAt
  group     Group      @relation(fields: [groupId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
  @@map("groupMembers")
}

model Post {
  id              String                   @id @default(uuid())
  userId          String
  groupId         String?
  content         String
  totalViewCount  Int                      @default(0)
  visibility      EUserPostVisibility
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now()) @updatedAt
  deletedAt       DateTime?
  reactions       PostReaction[]           @relation("UserPostReactions")
  group           Group?                   @relation(fields: [groupId], references: [id])
  user            User                     @relation(fields: [userId], references: [id])
  taggedUsers     PostTaggedUser[]
  viewPermissions UserPostViewPermission[]

  @@map("posts")
}

model PostTaggedUser {
  postId       String
  taggedUserId String
  post         Post   @relation(fields: [postId], references: [id])
  taggedUser   User   @relation(fields: [taggedUserId], references: [id])

  @@id([postId, taggedUserId])
  @@map("posttaggedUsers")
}

model UserPostViewPermission {
  postId    String
  viewerId  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  viewer    User      @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@id([postId, viewerId])
  @@map("userPostViewPermissions")
}

model PostReaction {
  userId    String
  postId    String
  type      EReactionType
  createdAt DateTime      @default(now())
  deletedAt DateTime?
  updatedAt DateTime      @default(now()) @updatedAt
  post      Post          @relation("UserPostReactions", fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
  @@map("postReactions")
}

enum ENotification {
  USER
  LIVESTREAM
  CHAT
}

enum ECategory {
  USER
  LIVESTREAM
}

enum ETag {
  CATEGORY
  LIVESTREAM
}

enum EGroupVisibility {
  PUBLIC
  PRIVATE
  HIDDEN
}

enum EGroupRole {
  MEMBER
  ADMIN
}

enum EUserPostVisibility {
  PUBLIC
  FRIENDS_ONLY
  SPECIFIC
  ONLY_ME
}

enum EReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}
