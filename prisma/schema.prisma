generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// user
enum EUserStatus{
  VERIFIED
  UNVERIFIED
  BANNED
}
model User {
  id                    String                   @id @default(uuid())
  name                  String                   @unique
  displayName           String?
  slug                  String
  email                 String                   @unique
  password              String
  phoneNumber           String
  status                EUserStatus              
  dob                   DateTime
  emailVerifyToken      String                   @default("")
  phoneVerifyToken      String                   @default("")
  forgotPasswordToken   String                   @default("")
  otpToken              String                   @default("")
  isActive              Boolean                  @default(true)
  is2FA                 Boolean                  @default(false)
  view                  Int                      @default(0)
  bio                   String?                  @default("")
  thumbnail             String?
  serverUrl             String?                  
  streamKey             String?                  @unique()
  lastUsernameChangeAt  DateTime?
  isOnline              Boolean                  @default(false)
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
  
  livestreamInfo        LiveStreamInfo?
  CategoryFollowers     CategoryFollowers[]      @relation("Users")
  devices               Device[]
  externalLinks         ExternalLink[]
  followedBy            Follower[]               @relation("UserFollowing")
  following             Follower[]               @relation("UserFollowers")
  groupMemberships      GroupMember[]
  ownedGroups           Group[]                  @relation("GroupOwner")
  hiddenByUsers         HiddenUser[]             @relation("HiddenUser")
  hiddenUsers           HiddenUser[]             @relation("UserWhoHides")
  loginHistories        LoginHistory[]
 receivedNotifications NotificationUser[]
  postReactions         PostReaction[]
  userPosts             Post[]
  posts       GroupPost[]
  taggedUsers           PostTaggedUser[]
  tokens                Token[]
  viewPermissions       UserPostViewPermission[]
  userRoles             UserRole[]
  friends               Friend[]                 @relation("UserFriends")
  reverseFriends        Friend[]                 @relation("UserFriendsReverse")
  sentFriendRequest     FriendRequest[]          @relation("SentFriendRequests")
  receivedFriendRequest FriendRequest[]          @relation("ReceivedFriendRequests")
  membershipRequests    MemberRequest[]
  sentInvitations       GroupInvitation[]    @relation("InviterUser")
  receivedInvitations   GroupInvitation[]    @relation("InvitedUser")
  postTags    GroupPostTaggedUser[]
  Livestream Livestream[]
  scheduledGroupPost ScheduledGroupPost[]
  postComments  PostComment[]
  groupPostComments GroupPostComment[]
  scheduledPost ScheduledPost[]
   conversations  Conversation[] @relation("CreatorConversations")
  receivedConversations Conversation[] @relation("ReceiverConversations")
  messages              Message[]
  @@index([isActive])
  @@map("users")
}
model LiveStreamInfo{
  id                  String  @id @default(uuid())
  userId               String   @unique()
  userName             String?
  userImage            String?
  userSlug             String?
  title                String?
  isLive               Boolean?
  thumbnailPreviewImage String?
  themeColor           String?
  user                 User @relation(fields:[userId],references: [id])
  livestreamCateInfo   LiveStreamCategoriesInfo[]
  livestreamTagInfo    LiveStreamTagsInfo[]
  @@map("liveStreamInfos")
}
model LiveStreamTagsInfo{
  liveStreamInfoId    String
  tagId               String
  liveStreamInfo      LiveStreamInfo @relation(fields: [liveStreamInfoId], references: [id])
  tag                 Tag        @relation(fields: [tagId],references: [id])
  @@id([liveStreamInfoId,tagId])
  @@map("liveStreamTagsInfos")
}
model LiveStreamCategoriesInfo{
  liveStreamInfoId    String
  categoryId          String
  liveStreamInfo      LiveStreamInfo @relation(fields: [liveStreamInfoId], references: [id]) 
  category            Category       @relation(fields: [categoryId],references: [id])
  @@id([liveStreamInfoId,categoryId])
  @@map("liveStreamCategoriesInfos")
}
model Livestream {
  id                   String   @id @default(uuid())
  userId               String   
  slug                 String?
  totalView            Int?
  isChatEnabled        Boolean?
  isChatDelayed        Boolean?
  delayedSeconds       String?
  isChatFollowersOnly  Boolean?
  ingressId            String?  
  startStreamAt          DateTime?
  endStreamAt            DateTime?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
  @@map("livestreams")
  
}

model ExternalLink {
  id        String    @id @default(uuid())
  title     String
  url       String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@map("externalLinks")
}

model Device {
  id             String         @id @default(uuid())
  userId         String
  type           String
  name           String
  lastUsed       DateTime
  userAgent      String
  ipAddress      String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  deletedAt      DateTime?
  user           User           @relation(fields: [userId], references: [id])
  loginHistories LoginHistory[]
  token          Token?

  @@map("devices")
}

model LoginHistory {
  id          String    @id @default(uuid())
  userId      String
  deviceId    String
  loginAt     DateTime
  loginStatus Boolean
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  device      Device    @relation(fields: [deviceId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("loginHistories")
}

model Token {
  id        String    @id @default(uuid())
  userId    String
  deviceId  String    @unique
  token     String
  expiresAt DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  device    Device    @relation(fields: [deviceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@map("tokens")
}

// role permission
model Role {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]
  userRoles       UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime         @default(now()) @updatedAt
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt
  role      Role      @relation(fields: [roleId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("userRoles")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @default(now()) @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("rolePermissions")
}

// image
enum EImage{
  USER
  POST
  CATEGORY
  GROUP
  GROUP_POST
}
enum EImageType{
  THUMBNAIL
  AVATAR
}
model Image{
  id             String @id @default(uuid())
  url            String 
  publicId       String @unique
  applicableType EImage
  imageType      EImageType?
  applicableId   String
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
 
  @@map("images")
}

// notification
model Notification {
  id                 String             @id @default(uuid())
  title              String
  message            String
  slug               String
  type               ENotification
  createdAt          DateTime           @default(now())
  updatedAt          DateTime?           @default(now()) @updatedAt()
  senderId           String
  deletedAt          DateTime?
  notificationsUsers NotificationUser[]

  @@map("notifications")
}

model NotificationUser {
  notificationId String
  hasRead        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  receiverId     String
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [receiverId], references: [id])

  @@id([receiverId, notificationId])
  @@map("notificationsUser")
}
// follower
model Follower {
  followDate        DateTime @default(now())
  destinationUserId String
  sourceUserId      String
  destinationUser   User     @relation("UserFollowing", fields: [destinationUserId], references: [id])
  sourceUser        User     @relation("UserFollowers", fields: [sourceUserId], references: [id])
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @default(now()) @updatedAt
  @@id([sourceUserId, destinationUserId])
  @@map("followers")
}
// friend
enum EFriendRequestStatus {
  PENDING    // Request is pending
  ACCEPTED   // Request accepted (move to Friend table)
  REJECTED   // Request rejected
}
model Friend{
  userId      String
  friendId    String
  user        User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend      User     @relation("UserFriendsReverse", fields: [friendId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @default(now()) @updatedAt
  @@id([userId,friendId])
  @@map("friends")

}
model FriendRequest{
  senderId    String
  receiverId  String
  status      EFriendRequestStatus  @default(PENDING)
  sender      User              @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User              @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @default(now()) @updatedAt
  @@id([senderId,receiverId])
  @@map("friendRequests")
}
// category - tag
model Category {
  id                String              @id @default(uuid())
  currentTotalView  Int                 @default(0)
  name              String
  slug              String              @unique
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  deletedAt         DateTime?
  numberOfFollowers Int                 @default(0)
  categoryFollowers CategoryFollowers[] @relation("Categories")
  tagsCategories    TagsCategories[]    @relation("Categories")
  livestreamCateInfo   LiveStreamCategoriesInfo[]
  @@map("categories")
}

model Tag {
  id             String           @id @default(uuid())
  name           String
  slug           String           @unique
  applicableTo   ETag
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  deletedAt      DateTime?
  tagsCategories TagsCategories[] @relation("Tags")
  livestreamCateInfo   LiveStreamTagsInfo[]
  @@map("tags")
}

model TagsCategories {
  tagId      String
  categoryId String
  category   Category @relation("Categories", fields: [categoryId], references: [id])
  tag        Tag      @relation("Tags", fields: [tagId], references: [id])

  @@id([tagId, categoryId])
  @@map("tagCategories")
}

model CategoryFollowers {
  userId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  category   Category @relation("Categories", fields: [categoryId], references: [id])
  user       User     @relation("Users", fields: [userId], references: [id])

  @@id([userId, categoryId])
  @@map("categoryFollowers")
}
// post 
model Post {
  id              String                   @id @default(uuid())
  userId          String
  // groupId         String?
  content         String
  totalViewCount  Int                      @default(0)
  visibility      EUserPostVisibility
  isPublic        Boolean                  @default(false)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @default(now()) @updatedAt
  deletedAt       DateTime?
  reactions       PostReaction[]           @relation()
  // group           Group?                   @relation(fields: [groupId], references: [id])
  user            User                     @relation(fields: [userId], references: [id])
  taggedUsers     PostTaggedUser[]
  sharedPost      SharedPost[]
  viewPermissions UserPostViewPermission[]
  comments        PostComment[]
  scheduledPost   ScheduledPost[]

  @@map("posts")
}
model PostComment {
  id          String   @id @default(uuid())
  postId      String
  userId      String
  parentId    String? 
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relations
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      PostComment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  replies     PostComment[] @relation("ParentChild")

  @@index([postId])
  @@index([userId])
  @@map("postComments")
}

model SharedPost{
   id            String    @id @default(uuid())
  postId        String
  sharedById    String
  sharedToId    String
  sharedToType  ESharedType
  customContent String
  createdAt     DateTime  @default(now())

  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("sharedPosts")
}
model ScheduledPost {
  id          String   @id @default(uuid()) 
  userId      String  
  postId      String   
  scheduledAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("scheduledPosts")
}

model PostTaggedUser {
  postId       String
  taggedUserId String
  post         Post   @relation(fields: [postId], references: [id],onDelete: Cascade)
  taggedUser   User   @relation(fields: [taggedUserId], references: [id],onDelete: Cascade)

  @@id([postId, taggedUserId])
  @@map("postTaggedUsers")
}

model UserPostViewPermission {
  postId    String
  viewerId  String
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @default(now()) @updatedAt
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  viewer    User      @relation(fields: [viewerId], references: [id], onDelete: Cascade)

  @@id([postId, viewerId])
  @@map("userPostViewPermissions")
}

model PostReaction {

  userId    String
  postId      String     

  type      EReactionType
  createdAt DateTime      @default(now())
  deletedAt DateTime?
  updatedAt DateTime      @default(now()) @updatedAt
  post      Post         @relation(fields: [postId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
 @@id([userId,postId])
  @@map("postReactions")
}

model HiddenUser {
  userId       String
  hiddenUserId String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime  @default(now()) @updatedAt
  hiddenUser   User      @relation("HiddenUser", fields: [hiddenUserId], references: [id])
  user         User      @relation("UserWhoHides", fields: [userId], references: [id])

  @@id([userId, hiddenUserId])
  @@map("hiddenUsers")
}
// group
model Group {
  id          String           @id @default(uuid())
  ownerId     String
  name        String
  description String?
  visibility  EGroupVisibility
  privacy     EGroupPrivacy
  createdAt   DateTime         @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime         @default(now()) @updatedAt
  rules       GroupRule[]
  members     GroupMember[]
  memberRequests MemberRequest[]
  owner       User             @relation("GroupOwner", fields: [ownerId], references: [id])
  posts       GroupPost[]
  inviteLinks GroupInviteLink[]
  invitations GroupInvitation[]
  postTags    GroupPostTaggedUser[]
  scheduledPost ScheduledGroupPost[]
  groupPostComment GroupPostComment[]

  @@map("groups")
}
model GroupPostComment {
  id          String   @id @default(uuid())
  groupPostId      String
  userId      String
  groupId     String
  parentId    String? 
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // Relations
  post        GroupPost      @relation(fields: [groupPostId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  group       Group     @relation(fields:[groupId],references: [id],onDelete: Cascade)
  parent      GroupPostComment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  replies     GroupPostComment[] @relation("ParentChild")

  @@index([groupPostId])
  @@index([userId])
  @@map("groupPostComments")
}
model ScheduledGroupPost {
  id          String   @id @default(uuid())
  groupId     String   
  userId      String  
  postId      String   
  scheduledAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post        GroupPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@map("scheduledGroupPosts")
}
model GroupPostTaggedUser {
  postId       String
  taggedUserId String
  groupId      String
  post         GroupPost   @relation(fields: [postId], references: [id],onDelete: Cascade)
  taggedUser   User   @relation(fields: [taggedUserId], references: [id],onDelete: Cascade)
  group        Group  @relation(fields: [groupId],references: [id])
  @@id([postId, taggedUserId])
  @@map("groupPostTaggedUsers")
}
model GroupInviteLink {
  id            String    @id @default(uuid())
  groupId       String
  link          String    @unique
  expiresAt     DateTime
  maxUses       Int
  currentUses   Int       @default(0)
  createdAt     DateTime  @default(now())

  group         Group     @relation(fields: [groupId], references: [id])


  @@map("groupInviteLinks")
}

model MemberRequest {
  id          String        @id @default(uuid())
  groupId     String
  userId      String
  status      EGroupRequestStatus
  requestedAt DateTime      @default(now())
  reviewedAt  DateTime?
  comment     String?
  
  group       Group         @relation(fields: [groupId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@map("memberRequests")
}

model GroupMember {
  groupId   String
  memberId    String
  joinedAt  DateTime   @default(now())
  role      EGroupRole
  createdAt DateTime   @default(now())
  deletedAt DateTime?
  updatedAt DateTime   @default(now()) @updatedAt
  group     Group      @relation(fields: [groupId], references: [id])
  member      User       @relation(fields: [memberId], references: [id])

  @@id([groupId, memberId])
  @@map("groupMembers")
}
model GroupRule {
  id          String   @id @default(uuid())
  groupId     String
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  deletedAt   DateTime?

  group       Group    @relation(fields: [groupId], references: [id])

  @@map("groupRules")
}
model GroupPost {
  id          String         @id @default(uuid())
  groupId     String
  userId      String
  tagByGroupPostId String?
  content     String
  totalViewCount  Int        @default(0)
  status      EGroupPostStatus    @default(PENDING)
  isPublic    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  deletedAt   DateTime?

  group       Group          @relation(fields: [groupId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  postTags    GroupPostTaggedUser[]
  scheduledPost ScheduledGroupPost[]
  groupPostComment GroupPostComment[]

  @@map("groupPosts")
}
model GroupInvitation{
  id          String       @id @default(uuid())
  groupId     String
  invitedUserId String
  inviterId   String
  status      EInvitationStatus 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  deletedAt   DateTime?
  expiredAt   DateTime?
  group       Group        @relation(fields: [groupId], references: [id])
  invitedUser   User           @relation("InvitedUser", fields: [invitedUserId], references: [id])
  inviter       User           @relation("InviterUser", fields: [inviterId], references: [id])

  @@map("groupInvitations")
}
// 1-1 chat
model Conversation{
  id      String  @id @default(uuid())
  creatorId String 
  receiverId  String
  lastMessageSentId String?
  creator       User      @relation("CreatorConversations", fields: [creatorId], references: [id])
  receiver      User      @relation("ReceiverConversations", fields: [receiverId], references: [id])
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?  
  messages      Message[] 
  @@unique([creatorId, receiverId]) 
  @@map("conversations")
}
model Message{
  id      String  @id @default(uuid())
  content String
  authorId  String
  conversationId String 
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?  
  updatedAt     DateTime  @default(now()) @updatedAt
  author  User @relation(fields: [authorId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  @@map("messages")
}
enum ENotification {
  USER
  LIVESTREAM
  CHAT
}

enum ECategory {
  USER
  LIVESTREAM
}

enum ETag {
  CATEGORY
  LIVESTREAM
}

enum EGroupVisibility {
  PUBLIC
  PRIVATE
  HIDDEN
}
enum EGroupPrivacy {
  VISIBLE
  HIDDEN
}
enum EGroupRequestStatus {
  PENDING
  APPROVED
  DECLINED
}
enum EGroupPostStatus {
  PENDING
  APPROVED
  DECLINED
}

enum EGroupRole {
  MEMBER
  ADMIN
}

enum EUserPostVisibility {
  PUBLIC
  FRIENDS_ONLY
  SPECIFIC
  ONLY_ME
}

enum EReactionType {
  LIKE
  LOVE
  HAHA
  WOW
  SAD
  ANGRY
}
enum ESharedType{
  USER 
  CHAT 
  GROUP
}
enum EInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

